<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-09T00:41:49+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">obo.dev</title><entry><title type="html">Немного про циклы</title><link href="http://localhost:4000/posts/a-bit-of-loops/" rel="alternate" type="text/html" title="Немного про циклы" /><published>2022-08-08T00:00:00+02:00</published><updated>2022-08-08T00:00:00+02:00</updated><id>http://localhost:4000/posts/a-bit-of-loops</id><content type="html" xml:base="http://localhost:4000/posts/a-bit-of-loops/"><![CDATA[<h1 id="что-такое-цикл">Что такое цикл?</h1>

<p>Цикл, очевидно, это инструмент, который позволяет делать повторяющиеся действия. Тебе, чтобы побороть цикл, придётся применить чуток внимательности и усилий.</p>

<blockquote>
  <p>Ты так же можешь встретить определение - <strong>оператор управления потоком</strong></p>
</blockquote>

<p>На данный момент науке известны три вида циклов в яп <strong>Swift</strong>.</p>

<h2 id="while">While</h2>
<blockquote>
  <p>Дословно звучит как “ПОКА”, “ПОКУДА”, “ДОКОЛЕ” -&gt; “ДЕЛАЙ ЧТО-ТО”</p>
</blockquote>

<p>Это походу самый простой цикл, который можно себе представить, выглядит примерно так:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">while</span> <span class="kt">УСЛОВИЕ</span> <span class="p">{</span>
	<span class="kt">КОДЕЦ</span><span class="p">,</span> <span class="kt">КОТОРЫЙ</span> <span class="kt">НАДО</span> <span class="kt">ВЫПОЛНИТЬ</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Условие всегда принимает <code class="language-plaintext highlighter-rouge">Bool</code>. Это может быть результат работы функции или оператора, не важно, главное, чтобы там всегда был <code class="language-plaintext highlighter-rouge">Bool</code>. Пихнёшь туда <code class="language-plaintext highlighter-rouge">Bool</code> и все будет работать как надо. Например, можно даже попробовать дотянуться до бесконечности:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">while</span> <span class="kc">true</span> <span class="p">{</span>
	<span class="nf">print</span><span class="p">(</span><span class="s">"to the infinity and beyond"</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<blockquote>
  <p>Подобные устремления крайне сильно одобряется этим персонажем - 
<img src="https://github.com/obodev/obodev.github.io/blob/main/assets/images/buzz-lightyear.gif?raw=true" alt="Buzz Lightyear" /></p>
</blockquote>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">var</span> <span class="nv">iterator</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">var</span> <span class="nv">sum</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">while</span> <span class="n">iterator</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="p">{</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span> 
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="c1">//Код, аналогичный подобному выражению: 1+2+3+4+5+6+7+8+9</span>

<span class="nf">print</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span> <span class="c1">//печатает 45</span>

</code></pre></div></div>

<p>Примеры выше наглядно показывают пользу.</p>

<h2 id="repeat--while">Repeat – While</h2>
<blockquote>
  <p>Дословно звучит как “ДЕЛАЙ ЧТО-ТО” -&gt; “ПОКА”, “ПОКУДА”, “ДОКОЛЕ”</p>
</blockquote>

<p>Из дословного перевода становится понятно, что он работает так же как и <code class="language-plaintext highlighter-rouge">while</code>, но чутка наоборот:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">var</span> <span class="nv">i</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">var</span> <span class="nv">runLoop</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span>
<span class="k">var</span> <span class="nv">sum</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">while</span> <span class="n">runLoop</span> <span class="p">{</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span> <span class="c1">//печатает 0</span>

</code></pre></div></div>

<blockquote>
  <p>Делает он так по очевидной причине, в условие передан <code class="language-plaintext highlighter-rouge">false</code> и цикл отрабатывает <strong>0 раз</strong></p>
</blockquote>

<p><strong>НО</strong>, попробуем сделать то же самое с применением <code class="language-plaintext highlighter-rouge">repeat - while</code>:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">var</span> <span class="nv">i</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">var</span> <span class="nv">runLoop</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span>
<span class="k">var</span> <span class="nv">sum</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">repeat</span> <span class="p">{</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="p">}</span> <span class="k">while</span> <span class="n">runLoop</span>

<span class="nf">print</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span> <span class="c1">//печатает 1</span>

</code></pre></div></div>

<p>И сразу же видим, что результат отличается. Отличие связано с тем, что в отличие от <code class="language-plaintext highlighter-rouge">while</code>, <code class="language-plaintext highlighter-rouge">repeat - while</code> сначала выполняет действие, а потом проверяет условие. Поэтому, он всегда отрабатывает хотя бы один раз.</p>

<h1 id="for--in">For – In</h1>
<blockquote>
  <p>Дословно звучит как “ДЛЯ КАЖДОГО ЧЕГО-ТО В ЧЕМ-ТО”</p>
</blockquote>

<p>Один из самых популярных инструментов. Ты будешь им пользоваться каждый день.</p>

<p>Выглядит так:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">for</span> <span class="kt">ЧТО</span><span class="o">-</span><span class="kt">ТО</span> <span class="k">in</span> <span class="kt">ЧЕМ</span><span class="o">-</span><span class="kt">ТО</span> <span class="p">{</span>
	<span class="kt">КОДЕЦ</span><span class="p">,</span> <span class="kt">КОТОРЫЙ</span> <span class="kt">НАДО</span> <span class="kt">ВЫПОЛНИТЬ</span>
	<span class="kt">ЧТО</span><span class="o">-</span><span class="kt">ТО</span> <span class="n">доступно</span> <span class="n">внутри</span> <span class="n">его</span> <span class="n">области</span> <span class="n">видимости</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Например, мы решили сложить все числа в последовательности <code class="language-plaintext highlighter-rouge">0...9</code>:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">var</span> <span class="nv">sum</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="mi">9</span> <span class="p">{</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">i</span>
<span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="n">sum</span><span class="p">)</span> <span class="c1">//печатает 45</span>


</code></pre></div></div>

<p>Получается, что для каждого <code class="language-plaintext highlighter-rouge">i</code> в последовательности <code class="language-plaintext highlighter-rouge">0...9</code> к <code class="language-plaintext highlighter-rouge">sum</code> будет прибавляться <code class="language-plaintext highlighter-rouge">i</code>. Он начнёт с 0 и будет перебирать все числа в последовательности, пока последовательность не закончится.</p>

<p>Таким образом, можно перебирать любую последовательность, например массив:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">let</span> <span class="nv">dudes</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Миша"</span><span class="p">,</span> <span class="s">"Гриша"</span><span class="p">,</span> <span class="s">"Толя"</span><span class="p">,</span> <span class="s">"Опанас"</span><span class="p">,</span> <span class="s">"Ваня"</span><span class="p">]</span>

<span class="k">for</span> <span class="n">dude</span> <span class="k">in</span> <span class="n">dudes</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Привет, </span><span class="se">\(</span><span class="n">dude</span><span class="se">)</span><span class="s">!"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Привет, Миша!</span>
<span class="c1">// Привет, Гриша!</span>
<span class="c1">// Привет, Толя!</span>
<span class="c1">// Привет, Опанас!</span>
<span class="c1">// Привет, Ваня!</span>

</code></pre></div></div>

<blockquote>
  <p>Важно помнить, что название итератору мы даём сами, это сделано для нашего же удобства. В первом примере мы назвали итератор <code class="language-plaintext highlighter-rouge">i</code> и использовали это имя внутри цикла, во втором же это был <code class="language-plaintext highlighter-rouge">dude</code>.</p>
</blockquote>

<p>Это всё, теперь ты знаешь как использовать циклы! 🙂</p>]]></content><author><name></name></author><category term="Swift" /><category term="SPL" /><category term="Циклы" /><summary type="html"><![CDATA[Что такое цикл?]]></summary></entry></feed>